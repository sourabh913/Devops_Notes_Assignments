Whenever you want to check your inventory, you can run:

ansible-inventory --list -y

to use the control server
If you can ssh from your control host to your target hosts (i.e., ec2 instances), but "ansible all -m ping" fails with a publickey error message, then you need to modify the ansible.cfg file in your working (playbook) directory.

[defaults]
inventory = /etc/ansible/hosts
remote_user = ec2-user
private_key_file = /etc/ansible/abc.pem

For me the key was to add private_key_file = /home/ubuntu/.ssh/my_key.pem

Also, make sure to modify the properties of your key file, for example: chmod 400 /home/ubuntu/.ssh/my_key.pem

Otherwise, AWS will reject the key as "too open", but that won't come through in the error message. You can test this by using a direct connection from your control host using:

ssh -i /home/ubuntu/.ssh/my_key.pem ubuntu@Internal_IP_Address_of_Target_Machine

*********************
check disk usage on all servers with:

ansible all -a "df -h" 

************************
apt module to install the latest version of vim on all the servers in your inventory:
ansible all -m yum -a "name=vim state=latest" 

****************************
check the uptime of every host in the servers group:

ansible servers -a "uptime" -u root

**************************
If ansible does not find the python path.
[WARNING]: Unhandled error in Python interpreter discovery for host
54.234.210.6: unexpected output from Python interpreter discovery
[WARNING]: sftp transfer mechanism failed on [54.234.210.6]. Use
ANSIBLE_DEBUG=1 to see detailed information

 The simplest solution is to tell ansible where to find it in ansible.cfg. Just add:
[defaults]
interpreter_python  = <pyhton path in client> eg /bin/python
***************************
[WARNING]: sftp transfer mechanism failed on [54.234.210.6]. Use
ANSIBLE_DEBUG=1 to see detailed information
[WARNING]: scp transfer mechanism failed on [54.234.210.6]. Use ANSIBLE_DEBUG=1
to see detailed information

If this line is commented-out, the sftp is disabled. To fix it, you can either enable sftp, or change Ansible configuration. I prefer the Ansible configuration change, take a look at ansible.cfg and add/change:

[ssh_connection]
scp_if_ssh=True

****************************
1. To run any playbook use the following command
	ansible-playbook <playbook.yml>
2. To check the playbook for syntax errors
	ansible-playbook <playbook.yml> --syntax-check
3. To view hosts list
	ansible-inventory --list -y

****************************
Example 1: Create the file on the target machines or servers as mentioned in the inventory file and the webserver’s group, save the below code with .yml extension and run the playbook.

- hosts: web
  become: true
  tasks:
  - name: Create a file
    file: path=/etc/ansible/kris.txt state=touch

****************************

Example 2: Create a directory with the mode as 775 and owner/group as Ansible.

---
- hosts: web
  become: true
  tasks:
  - name: Create directory
    file: path=/etc/ansible/kris state=directory mode=775 owner=root group=root

*******************************
Example 3: Create a user. Let’s look at the user module to create and delete users in the playbook.

---
- hosts: web
  become: true
  tasks:
  - name: Create User
    user: name=niranjan password=niranjan groups=root shell=/bin/bash

*******************************
Example 4: Remove user. Removing a user is very easy and it will need the state to be set to absent. This is equivalent to the userdel command in Linux.

---
- hosts: web
  become: true
  tasks:
  - name: Remove User
    user: name=niranjan state=absent remove=yes force=yes

In the above playbook, remove=yes will remove the home directory and force=yes will remove the files in the directory.
*******************************
Example 6: Copy content to a file using the copy module.

If you need to copy a file to the target machines or servers use the src and dest in the copy module.

---
- hosts: web
  become: true
  tasks:
  - name: Copy content to file
    copy: content="Hello World Niranjan \n" dest=/etc/ansible/niranjan.txt

For Example,

copy: src=/etc/ansible/niranjan.txt dest=/tmp/niranjan.txt
*******************************
Example 7: Replace all instances of a string.

Using replace module we can replace a word with another word. The replace module will need 3 parameters i.e. ‘path’, ‘regexp’ (to find the particular word) and ‘replace’ (providing another word for replacement).

- hosts: web
  tasks:
  - name: Replace example
    replace:
     path: /etc/ansible/niranjan.txt
     regexp: 'hello'
     replace: "world"

*******************************
Example 8: Archive or ZIP files and Folders

Using the Ansible archive module you can compress files or folders to ‘zip’, ‘.gz’, or ‘bz2’ format.

Note: The files or folders to be compressed should be available on the target servers and should have the packages for tar, bzip2, gzip, zip file installed on them. You can have a separate playbook task for installing these packages.

---
- hosts: all
  become: true
  tasks:
  - name: Ansible zip file example
    archive:
     path: /etc/ansible/niranjan.txt
     dest: /etc/ansible/niranjan.zip
     format: zip

The above playbook will zip the file niranjan.txt to niranjan.zip file
*******************************
---
- hosts: all
  tasks:
  - name: Ansible zip multiple files example
  archive:
   path:
    - /home/ansible/niranjan1.txt
    - /home/ansible/niranjan2.txt
   dest: /home/ansible/niranjan.zip
   format: zip
The above playbook will zip multiple files to niranjan.zip file.
*******************************
- hosts: all
  tasks:
  - name: Ansible zip directory example
    archive:
     path:
      - /home/ansible
     dest: /home/ansible/niranjan.zip
     format: zip
The above playbook will zip all files in the /home/ansible directory.

*******************************
Example 9: Working with date and timestamp

Using the system date and timestamp helps in certain status or logging purposes. The Ansible facts provide access to remote or target servers date and time. So we can use the debug module to print the output along with the var attribute as shown below.

---
- hosts: webservers
  become: true
  tasks:
  - name: Date and Time Example in Ansible
    debug:
     var=ansible_date_time.date
The above playbook displays the date.
*******************************
---
- hosts: webservers
  become: true
  tasks:
  - name: Date and Time Example in Ansible
  debug:
   var=ansible_date_time.time
The above playbook displays the time.
*******************************
- hosts: webservers
  tasks:
  - name: Ansible timestamp filename example
    command: touch niranjan{{ansible_date_time.date}}.log
The above playbook will create a dynamic file based on the current date for E.g. niranjan2018-07-15.log
*******************************
Example 10: Variables Example

Variables are used to store values. In the below Example I am declaring the variable name with value niranjan. The output will be niranjan.

- hosts: webservers
  vars:
    - name: niranjan
  tasks:
    - name: Ansible Basic Variable Example
      debug:
      msg: "{{ name }}"
We can also have an array or a list of variables as in the below Example.
*******************************
---
- hosts: all
  vars:
    - username: sammy
    - home: /home/sammy
  tasks:
    - name: print variables
      debug:
        msg: "Username: {{ username }}, Home dir: {{ home }}"
*******************************
Example 12: Playbook to install vim editor and GIT on the target servers or machines.

In this playbook, we have made use of the yum module to install the latest version of the software packages.

---
- hosts: webservers
  become: true
  tasks:
  - name: Install Package
    yum: name=vim,git state=latest
*******************************
---
- hosts: webservers
  become: true
  tasks:
  - name: Install Package
    yum: name=httpd state=present
  - name: Start httpd service
    service: name=httpd state=started

Apart from the yum module, the service module is also used to start the httpd service. The tasks run from top to bottom synchronously.
*******************************

Example 14: Install JDK

The following playbook will automate to install JDK 8 on all target machines or servers. JDK is a pre-requisite for most of the other software packages like Maven or Tomcat.

---
- hosts: webservers
  become: true
  vars:
   download_url: http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.rpm
  
  tasks:
  - name: Download JDK 8 RPM file
    command: "wget --no-check-certificate --no-cookies --header 'Cookie: oraclelicense=accept-securebackup-cookie' {{download_url}} "
  - name: Install JDK 8
    command: "rpm -ivh jdk-8u171-linux-x64.rpm"

*******************************
Example 15: Install Maven

The tasks performed are to download the maven file from the URL using the get_url module, extract the file downloaded, move it to a smaller directory, update and run the profile where the maven is added to the path.

---
- hosts: webservers
  become: true
  tasks:
  - name: Download Maven
    get_url: url=http://www-us.apache.org/dist/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.tar.gz dest=/opt/niranjan/apache-maven-3.5.3-bin.tar.gz
  - name: Extract Maven
    command: tar xvf /opt/niranjan/apache-maven-3.5.3-bin.tar.gz -C /opt/niranjan
  - name: Move to a smaller directory
    command: mv /opt/niranjan/apache-maven-3.5.3 /opt/niranjan/maven
  - name: Update Profile
    copy: content="export M2_HOME=/opt/niranjan/maven \n" dest=/etc/profile.d/maven.sh
  # lineinfile is used to add additional or append lines to existing files.
  - lineinfile:
     path: /etc/profile.d/maven.sh
  line: 'export PATH=${M2_HOME}/bin:${PATH}'
  - name: Source profile
    shell: source /etc/profile.d/maven.sh

*******************************
Example 16: Install Tomcat 8

The below playbook helps to install and start Tomcat 8 on to the target machines or servers.

You can click here to copy the link location of the latest version of Tomcat 8. Click here for the URL containing Tomcat 8 tar file that I have used in this playbook.

---
- hosts: webservers
  become: true
  gather_facts: no
  tasks:
  - name: Download Tomcat
    get_url: url=http://www-us.apache.org/dist/tomcat/tomcat-8/v8.5.32/bin/apache-tomcat-8.5.32.tar.gz dest=/home/ansible

  - name: Extract the file downloaded tomcat file
    command: tar xvf apache-tomcat-8.5.32.tar.gz
 
  - name: Move the Tomcat directory to a smaller one
    command: mv apache-tomcat-8.5.32 tomcat
  
  - name: Change Ownership and group of the Tomcat directory
    file: path=/home/ansible/tomcat owner=ansible group=ansible mode=775 state=directory recurse=yes
 
  - name: Start Tomcat
    command: nohup /home/ansible/tomcat/bin/startup.sh # Execute command even after you have exited from the shell prompt
    become: true
    become_user: ansible